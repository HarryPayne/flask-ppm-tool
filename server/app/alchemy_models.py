# coding: utf-8
import sqlalchemy as sa
from sqlalchemy import (BLOB, Column, Date, DateTime, desc, Enum, ForeignKey, 
                        Float, Integer, orm, Integer, String, Table, Text, text)
from sqlalchemy_utils import ChoiceType
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.dialects.mysql.base import MEDIUMBLOB
from sqlalchemy.dialects.postgresql import BYTEA
#     ARRAY, BIGINT, BIT, BOOLEAN, BYTEA, CHAR, CIDR, DATE, \
#     DOUBLE_PRECISION, ENUM, FLOAT, HSTORE, INET, INTEGER, \
#     INTERVAL, JSON, JSONB, MACADDR, NUMERIC, OID, REAL, SMALLINT, TEXT, \
#     TIME, TIMESTAMP, UUID, VARCHAR, INT4RANGE, INT8RANGE, NUMRANGE, \
#     DATERANGE, TSRANGE, TSTZRANGE, TSVECTOR


from widgets import ChoicesSelect

# mostly Autogenerated by ../make_sqlalchemy_models

# added by hand:
from app import db
from sqlalchemy.ext.hybrid import hybrid_property
Base = db.Model
metadata = db.metadata

# class Attributelist(Base):
#     __tablename__ = "newattributelist"
# #    __tablename__ = "attributelist"
# 
#     attributeID = Column(Integer, primary_key=True, server_default=text("'0'"))
#     attributeName = Column(String(32), nullable=False, server_default=text("''"))
#     format = Column(String(32), nullable=False, server_default=text("''"))
#     pptTable = Column(String(32))
#     table = Column(String(32), nullable=False, server_default=text("''"))
#     label = Column(String, nullable=False)
#     help = Column(Text, nullable=False)
#     attributeHelp = Column(Integer, nullable=False, server_default=text("'0'"))
#     byMonth = Column(Integer, nullable=False, server_default=text("'0'"))
#     byQuarter = Column(Integer, nullable=False, server_default=text("'0'"))
#     computed = Column(Integer, nullable=False, server_default=text("'0'"))
#     keepHistory = Column(Integer, nullable=False, server_default=text("'0'"))
#     multipleValued = Column(Integer, nullable=False, server_default=text("'0'"))
#     getByID = Column(String(32), nullable=False, server_default=text("''"))
#     orderByID = Column(Integer, nullable=False, server_default=text("'0'"))

class Complexitylist(Base):
    __tablename__ = "complexitylist"
    info = {"label": "complexity"}

    complexityID = Column(Integer, 
                          primary_key=True, server_default=text("'0'"))
    complexityDesc = Column(String(100), nullable=False, server_default=text("''"))
    complexityText = Column(Text, nullable=False)


class Costlevellist(Base):
    __tablename__ = "costlevellist"
    info = {"label": "cost level"}

    costlevelID = Column(Integer, primary_key=True, server_default=text("'0'"))
    costlevelDesc = Column(String(100), nullable=False, server_default=text("''"))
    costlevelText = Column(Text, nullable=False)


class Dispositionlist(Base):
    __tablename__ = "dispositionlist"
    info = {"label": "disposition"}

    dispositionID = Column(Integer, 
                           primary_key=True, server_default=text("'0'"))
    dispositionDesc = Column(String(100), nullable=False, server_default=text("''"))
    dispositionText = Column(Text, nullable=False)


# t_distributionlist = Table(
#     "distributionlist", metadata,
#     Column("address", String(32), nullable=False, index=True, server_default=text("''"))
# )


class Driverlist(Base):
    __tablename__ = "driverlist"
    info = {"label": "driver"}

    driverID = Column(Integer, primary_key=True, server_default=text("'0'"))
    driverDesc = Column(String(100), nullable=False, server_default=text("''"))
    driverText = Column(Text, nullable=False)

t_driver = Table(
    "driver", metadata,
    Column("projectID", Integer, ForeignKey("description.projectID"), nullable=False, index=True, server_default=text("'0'")),
    Column("driverID", Integer, ForeignKey("driverlist.driverID"), nullable=False, index=True, server_default=text("'0'"))
)

# class Driver(Base):
#     __tablename__ = "driver"
# 
#     projectID = Column(Integer, ForeignKey("description.projectID"), primary_key=True)
#     driverID = Column(Integer, ForeignKey("driverlist.driverID"), primary_key=True)

t_edit_log = Table(
    "edit_log", metadata,
    Column("user", String(100), nullable=False, index=True, server_default=text("''")),
    Column("projectID", Integer, ForeignKey("description.projectID"), nullable=False, index=True, server_default=text("'0'")),
    Column("action", String(100), nullable=False, server_default=text("''")),
    Column("timestamp", DateTime, nullable=False, index=True, server_default=text("CURRENT_TIMESTAMP"))
)


class Finallist(Base):
    __tablename__ = "finallist"
    info = {"label": "final state"}

    finalID = Column(Integer, primary_key=True, server_default=text("'0'"))
    finalDesc = Column(String(100), nullable=False, server_default=text("''"))
    finalText = Column(Text, nullable=False)


class Flavorlist(Base):
    __tablename__ = "flavorlist"
    info = {"label": "portfolio category"}

    flavorID = Column(Integer, primary_key=True, server_default=text("'0'"))
    flavorDesc = Column(String(100), nullable=False, server_default=text("''"))
    flavorText = Column(Text, nullable=False)


class Fundingsourcelist(Base):
    __tablename__ = "fundingsourcelist"
    info = {"label": "funding source"}

    fundingsourceID = Column(Integer, primary_key=True, server_default=text("'0'"))
    fundingsourceDesc = Column(String(100), nullable=False, server_default=text("''"))
    fundingsourceText = Column(Text, nullable=False)


class Hostlist(Base):
    __tablename__ = "hostlist"
    info = {"label": "host"}

    hostID = Column(Integer, primary_key=True, server_default=text("'0'"))
    hostDesc = Column(String(100), nullable=False, server_default=text("''"))
    hostText = Column(Text, nullable=False)


class Initiativelist(Base):
    __tablename__ = "initiativelist"
    info = {"label": "initiative"}

    initiativeID = Column(Integer, primary_key=True, server_default=text("'0'"))
    initiativeDesc = Column(String(100), nullable=False, server_default=text("''"))
    initiativeText = Column(Text, nullable=False)


class Maturitylist(Base):
    __tablename__ = "maturitylist"
    info = {"label": "maturity"}

    maturityID = Column(Integer, primary_key=True, server_default=text("'0'"))
    maturityDesc = Column(String(100), nullable=False, server_default=text("''"))
    maturityText = Column(Text, nullable=False)


class Progresslist(Base):
    __tablename__ = "progresslist"
    info = {"label": "progress"}

    progressID = Column(Integer, primary_key=True, server_default=text("'0'"))
    progressDesc = Column(String(100), nullable=False, server_default=text("''"))
    progressText = Column(Text, nullable=False)


class Proj_visibilitylist(Base):
    __tablename__ = "proj_visibilitylist"
    info = {"label": "project visibility"}

    proj_visibilityID = Column(Integer, primary_key=True, server_default=text("'0'"))
    proj_visibilityDesc = Column(String(100), nullable=False, server_default=text("''"))
    proj_visibilityText = Column(Text, nullable=False)


class Risklevellist(Base):
    __tablename__ = "risklevellist"
    info = {"label": "risk level"}

    risklevelID = Column(Integer, primary_key=True, server_default=text("'0'"))
    risklevelDesc = Column(String(100), nullable=False, server_default=text("''"))
    risklevelText = Column(Text, nullable=False)


class Scopelist(Base):
    __tablename__ = "scopelist"
    info = {"label": "scope"}

    scopeID = Column(Integer, primary_key=True, server_default=text("'0'"))
    scopeDesc = Column(String(100), nullable=False, server_default=text("''"))
    scopeText = Column(Text, nullable=False)


class Sponsorlist(Base):
    __tablename__ = "sponsorlist"
    info = {"label": "sponsor"}

    sponsorID = Column(Integer, primary_key=True, server_default=text("'0'"))
    sponsorDesc = Column(String(100), nullable=False, server_default=text("''"))
    sponsorText = Column(Text, nullable=False)


class Stakeholderlist(Base):
    __tablename__ = "stakeholderlist"
    info = {"label": "stakeholder"}

    stakeholderID = Column(Integer, primary_key=True, 
                           server_default=text("'0'"))
    stakeholderDesc = Column(String(100), nullable=False, server_default=text("''"))
    stakeholderText = Column(Text, nullable=False)

t_stakeholder = Table(
    "stakeholder", metadata,
    Column("projectID", Integer, ForeignKey("description.projectID"),nullable=False, index=True, server_default=text("'0'")),
    Column("stakeholderID", Integer, ForeignKey("stakeholderlist.stakeholderID"),nullable=False, index=True, server_default=text("'0'"))
)

# class Statuslist(Base):
#     __tablename__ = "statuslist"
#     info = {"label": "status"}
# 
#     statusID = Column(Integer, primary_key=True, server_default=text("'0'"))
#     statusDesc = Column(String(100), nullable=False, server_default=text("''"))


class Strategylist(Base):
    __tablename__ = "strategylist"
    info = {"label": "strategy"}

    strategyID = Column(Integer, primary_key=True, server_default=text("'0'"))
    strategyDesc = Column(String(100), nullable=False, server_default=text("''"))
    strategyText = Column(Text, nullable=False)


class Technologylist(Base):
    __tablename__ = "technologylist"
    info = {"label": "technology"}

    technologyID = Column(Integer, primary_key=True, server_default=text("'0'"))
    technologyDesc = Column(String(100), nullable=False, server_default=text("''"))
    technologyText = Column(Text, nullable=False)
    technologyRationale = Column(Text, nullable=False)


class Typelist(Base):
    __tablename__ = "typelist"
    info = {"label": "type"}

    typeID = Column(Integer, primary_key=True, server_default=text("'0'"))
    typeDesc = Column(String(100), nullable=False, server_default=text("''"))
    typeText = Column(Text, nullable=False)


t_upload = Table(
    "upload", metadata,
    Column("uploadID", Integer, nullable=False, index=True),
    Column("projectID", Integer, ForeignKey("description.projectID"), nullable=False),
    Column("uploadName", String(64), nullable=False),
    Column("uploadType", String(32), nullable=False),
    Column("uploadDesc", Text, nullable=False),
    Column("uploadData", BYTEA, nullable=False),
    Column("lastModifiedBy", String(100), nullable=False),
    Column("lastModified", DateTime, nullable=False, server_default=text("CURRENT_TIMESTAMP"))
)

# class Upload(Base):
#     __tablename__ = "upload"
# 
#     uploadID = Column(Integer, primary_key=True, nullable=False, index=True)
#     projectID = Column(Integer, ForeignKey("description.projectID"), nullable=False)
#     uploadName = Column(String(64), nullable=False)
#     uploadType = Column(String(32), nullable=False)
#     uploadDesc = Column(Text, nullable=False)
#     uploadData = Column(BLOB, nullable=False)
#     lastModifiedBy = Column(String(100), nullable=False)
#     lastModified = Column(DateTime, nullable=False, server_default=text("CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP"))
#     
#     description = db.relationship("Description", backref="uploads")



class Visibilitylist(Base):
    __tablename__ = "visibilitylist"
    info = {"label": "visibility"}

    visibilityID = Column(Integer, primary_key=True, server_default=text("'0'"))
    visibilityDesc = Column(String(100), nullable=False, server_default=text("''"))
    visibilityText = Column(Text, nullable=False)

class Year(Base):
    __tablename__ = "years"
    
    year = Column(Integer, primary_key=True, server_default=text("'0'"))
    
class Calendaryear(Base):
    __tablename__ = "calendaryears"
    
    calendaryearID = Column(Integer, primary_key=True, server_default=text("'0'"))
    calendaryearDesc = Column(String(4), nullable=False, server_default=text("''"))
    
class Fiscalyear(Base):
    __tablename__ = "fiscalyears"
    
    fiscalyearID = Column(Integer, primary_key=True, server_default=text("'0'"))
    fiscalyearDesc = Column(String(6), nullable=False, server_default=text("''"))
    
class Quarter(Base):
    __tablename__ = "quarters"

    quarterID = Column(Integer, primary_key=True, server_default=text("'0'"))
    quarterDesc = Column(String(12), nullable=False, server_default=text("''"))

class Month(Base):
    __tablename__ = "months"
    
    monthID = Column(Integer, primary_key=True, server_default=text("'0'"))
    monthDesc = Column(String(12), nullable=False, server_default=text("''"))

# vocabularies for rendering IDs as a select dropdown.
COMPLEXITY_RESULTS = []
COMPLEXITY_CHOICES = []
try:
    COMPLEXITY_RESULTS = Complexitylist.query.order_by("complexityID").all()
    for row in COMPLEXITY_RESULTS:
        COMPLEXITY_CHOICES.append((row.complexityID, row.complexityDesc))
except:
    pass

COSTLEVEL_RESULTS = []
COSTLEVEL_CHOICES = []
try:
    COSTLEVEL_RESULTS = Costlevellist.query.order_by("costlevelID").all()
    for row in COSTLEVEL_CHOICES:
        COSTLEVEL_CHOICES.append((row.costlevelID, row.costlevelDesc))
except:
    pass

DISPOSITION_RESULTS = []
DISPOSITION_CHOICES = []
try:
    DISPOSITION_RESULTS = Dispositionlist.query.order_by("dispositionDesc").all()
    for row in DISPOSITION_RESULTS:
        DISPOSITION_CHOICES.append((row.dispositionID, row.dispositionDesc))
except:
    pass

DRIVER_RESULTS = []
DRIVER_CHOICES = []
try:
    DRIVER_RESULTS = Driverlist.query.order_by("driverDesc").all()
    for row in DRIVER_RESULTS:
        DRIVER_CHOICES.append((row.driverID, row.driverDesc))
except:
    pass

FINAL_RESULTS = []
FINAL_CHOICES = []
try:
    FINAL_RESULTS = Finallist.query.order_by("finalID").all()
    for row in FINAL_RESULTS:
        FINAL_CHOICES.append((row.finalID, row.finalDesc))
except:
    pass

FLAVOR_RESULTS = []
FLAVOR_CHOICES = []
try:
    FLAVOR_RESULTS = Flavorlist.query.order_by("flavorID").all()
    for row in FLAVOR_RESULTS:
        FLAVOR_CHOICES.append((row.flavorID, row.flavorDesc))
except:
    pass

FUNDINGSOURCE_RESULTS = []
FUNDINGSOURCE_CHOICES = []
try:
    FUNDINGSOURCE_RESULTS = Fundingsourcelist.query.order_by("fundingsourceID").all()
    for row in FUNDINGSOURCE_RESULTS:
        FUNDINGSOURCE_CHOICES.append((row.fundingsourceID, row.fundingsourceDesc))
except:
    pass

FY_RESULTS = []
FY_CHOICES = []
try:
    FY_RESULTS = Fiscalyear.query.order_by(desc("fiscalyearID")).all()
    for row in FY_RESULTS:
        FY_CHOICES.append((row.fiscalyearID, row.fiscalyearDesc))
except:
    pass

HOST_RESULTS = []
HOST_CHOICES = []
try:
    HOST_RESULTS = Hostlist.query.order_by("hostDesc").all()
    for row in HOST_RESULTS:
       HOST_CHOICES.append((row.hostID, row.hostDesc))
except:
    pass

INITIATIVE_RESULTS = []
INITIATIVE_CHOICES = []
try:
    INITIATIVE_RESULTS = Initiativelist.query.order_by("initiativeDesc").all()
    for row in INITIATIVE_RESULTS:
        INITIATIVE_CHOICES.append((row.initiativeID, row.initiativeDesc))
except:
    pass

M_RESULTS = []
M_CHOICES = []
try:
    M_RESULTS = Month.query.order_by("monthID").all()
    for row in M_RESULTS:
        M_CHOICES.append((row.monthID, row.monthDesc))
except:
    pass

MATURITY_RESULTS = []
MATURITY_CHOICES = []
try:
    MATURITY_RESULTS = Maturitylist.query.order_by("maturityID").all()
    for row in MATURITY_RESULTS:
        MATURITY_CHOICES.append((row.maturityID, row.maturityDesc))
except:
    pass

PROGRESS_RESULTS = []
PROGRESS_CHOICES = []
try:
    PROGRESS_RESULTS = Progresslist.query.order_by("progressID").all()
    for row in PROGRESS_RESULTS:
        PROGRESS_CHOICES.append((row.progressID, row.progressDesc))
except:
    pass

PROJ_VISIBILITY_RESULTS = []
PROJ_VISIBILITY_CHOICES = []
try:
    PROJ_VISIBILITY_RESULTS = Proj_visibilitylist.query.order_by("proj_visibilityID").all()
    for row in PROJ_VISIBILITY_RESULTS:
        PROJ_VISIBILITY_CHOICES.append((row.proj_visibilityID, row.proj_visibilityDesc))
except:
    pass

Q_RESULTS = []
Q_CHOICES = []
try:
    Q_RESULTS = Quarter.query.order_by("quarterID").all()
    for row in Q_RESULTS:
        Q_CHOICES.append((row.quarterID, row.quarterDesc))
except:
    pass

RISKLEVEL_RESULTS = []
RISKLEVEL_CHOICES = []
try:
    RISKLEVEL_RESULTS = Risklevellist.query.order_by("risklevelID").all()
    for row in RISKLEVEL_RESULTS:
        RISKLEVEL_CHOICES.append((row.risklevelID, row.risklevelDesc))
except:
    pass

SCOPE_RESULTS = []
SCOPE_CHOICES = []
try:
    SCOPE_RESULTS = Scopelist.query.order_by("scopeID").all()
    for row in SCOPE_RESULTS:
        SCOPE_CHOICES.append((row.scopeID, row.scopeDesc))
except:
    pass

SPONSOR_RESULTS = []
SPONSOR_CHOICES = []
try:
    SPONSOR_RESULTS = Sponsorlist.query.order_by("sponsorDesc").all()
    for row in SPONSOR_RESULTS:
        SPONSOR_CHOICES.append((row.sponsorID, row.sponsorDesc))
except:
    pass

STAKEHOLDER_RESULTS = []
STAKEHOLDER_CHOICES = []
try:
    STAKEHOLDER_RESULTS = Stakeholderlist.query.order_by("stakeholderDesc").all()
    for row in STAKEHOLDER_RESULTS:
        STAKEHOLDER_CHOICES.append((row.stakeholderID, row.stakeholderDesc))
except:
    pass

TECHNOLOGY_RESULTS = []
TECHNOLOGY_CHOICES = []
try:
    TECHNOLOGY_RESULTS = Technologylist.query.order_by("technologyID").all()
    for row in TECHNOLOGY_RESULTS:
        TECHNOLOGY_CHOICES.append((row.technologyID, row.technologyDesc))
except:
    pass

TYPE_RESULTS = []
TYPE_CHOICES = []
try:
    TYPE_RESULTS = Typelist.query.order_by("typeDesc").all()
    for row in TYPE_RESULTS:
        TYPE_CHOICES.append((row.typeID, row.typeDesc))
except:
    pass

VISIBILITY_RESULTS = []
VISIBILITY_CHOICES = []
try:
    VISIBILITY_RESULTS = Visibilitylist.query.order_by("visibilityID").all()
    for row in VISIBILITY_RESULTS:
        VISIBILITY_CHOICES.append((row.visibilityID, row.visibilityDesc))
except:
    pass

Y_RESULTS = []
Y_CHOICES = []
try:
    Y_RESULTS = Calendaryear.query.order_by(desc("calendaryearID")).all()
    for row in Y_RESULTS:
        Y_CHOICES.append((row.calendaryearID, row.calendaryearDesc))
except:
    pass

t_child = Table(
    "child", metadata,
    Column("projectID", Integer, ForeignKey("description.projectID"), primary_key=True),
    Column("childID", Integer, ForeignKey("description.projectID"), primary_key=True)
)

class Disposition(Base):
    __tablename__ = "disposition"

    projectID = Column(Integer, ForeignKey("description.projectID"), primary_key=True, 
                       nullable=False, index=True, server_default=text("'0'"))
    disposedInFY = Column(Integer, ForeignKey("fiscalyears.fiscalyearID"), primary_key=True,
                          info={"choices": FY_CHOICES, 
                                "label": "disposed",
                                "attributeID": 310,
                                "help": "In which planning cycle was this disposition made? Changing this date and pressing save will create a new disposition record.  If you don't change the date, then you will update the record you are looking at."},
                          nullable=False, index=True, server_default=text("'0'"))
    disposedInQ = Column(Integer, ForeignKey("quarters.quarterID"), primary_key=True,
                         info={"choices": Q_CHOICES,
                               "attributeID": 315,
                               "help": ""},
                         nullable=False, index=True, server_default=text("'0'"))
    dispositionID = Column(Integer, ForeignKey(Dispositionlist.dispositionID),
                           info={"choices": DISPOSITION_CHOICES,
                                 "label": "disposition",
                                 "attributeID": 320,
                                 "help": "What decision was made during the planning cycle with respect to this project?"},
                           nullable=True, index=True, server_default=text("'0'"))
    disposition = db.relationship("Dispositionlist", backref="disposition")
    explanation = Column(Text, nullable=True, 
                         info={"attributeID": 330,
                               "help": "State the reasons behind the disposition decision."})
    reconsiderInFY = Column(Integer, ForeignKey("fiscalyears.fiscalyearID"),
                            info={"choices": FY_CHOICES, 
                                  "label": "reconsider",
                                  "attributeID": 340,
                                  "help": "For a deferred project, when will it be considered again?"},
                            nullable=True, server_default=None)
    reconsiderInQ = Column(Integer, ForeignKey("quarters.quarterID"),
                           info={"choices": Q_CHOICES,
                                 "attributeID": 345,
                                 "help": ""},
                           nullable=True, server_default=text("'0'"))
    startInY = Column(Integer, ForeignKey("calendaryears.calendaryearID"),
                      info={"choices": Y_CHOICES, 
                            "label": "start",
                            "attributeID": 350,
                            "help": "This date, and the next, are the dates agreed to by the project's host division during the sequencing stage.  They are high-level, estimated dates for the start and finish of work on the project."},
                      nullable=True, server_default=text("'0'"))
    startInM = Column(Integer, ForeignKey("months.monthID"),
                      info={"choices": M_CHOICES,
                            "attributeID": 355,
                            "help": ""},
                      nullable=True, server_default=text("'0'"))
    finishInY = Column(Integer, ForeignKey("calendaryears.calendaryearID"),
                       info={"choices": Y_CHOICES, 
                             "label": "finish",
                             "attributeID": 360,
                             "help": "What finishing month was estimated in the scheduling phase?"},
                       nullable=True, server_default=text("'0'"))
    finishInM = Column(Integer, ForeignKey("months.monthID"),
                       info={"choices": M_CHOICES,
                             "attributeID": 365,
                             "help": ""},
                       nullable=True, server_default=text("'0'"))
    lastModified = Column(DateTime, nullable=True, server_default=text("CURRENT_TIMESTAMP"), 
                          info={"label": "last updated", "attributeID": 998, "help": ""})
    lastModifiedBy = Column(String(100), nullable=True, server_default=text("''"), 
                            info={"label": "last updated by", "attributeID": 999, "help": ""})

    description = db.relationship("Description", backref="dispositions")
    

class Latest_disposition(Base):
    __tablename__ = "latest_disposition"
    projectID = Column(Integer, ForeignKey("description.projectID"), primary_key=True, 
                       nullable=False, index=True, server_default=text("'0'"))
    disposedInFY = Column(Integer, ForeignKey("fiscalyears.fiscalyearID"), primary_key=True,
                          info={"choices": FY_CHOICES, 
                                "label": "disposed",
                                "attributeID": 310,
                                "help": "In which planning cycle was this disposition made? Changing this date and pressing save will create a new disposition record.  If you don't change the date, then you will update the record you are looking at."},
                          nullable=False, index=True, server_default=text("'0'"))
    disposedInQ = Column(Integer, ForeignKey("quarters.quarterID"), primary_key=True,
                         info={"choices": Q_CHOICES,
                               "attributeID": 315,
                               "help": ""},
                         nullable=False, index=True, server_default=text("'0'"))
    
    @hybrid_property
    def disposedIn(self):
        return "FY" + str(self.disposedInFY)[-2:] + " Q" + str(self.disposedInQ)
    
    dispositionID = Column(Integer, ForeignKey(Dispositionlist.dispositionID),
                           info={"choices": DISPOSITION_CHOICES,
                                 "label": "disposition",
                                 "attributeID": 320,
                                 "help": "What decision was made during the planning cycle with respect to this project?"},
                           nullable=True, index=True, server_default=text("'0'"))
    disposition = db.relationship("Dispositionlist", backref="latest_disposition")
    explanation = Column(Text, nullable=True, 
                         info={"attributeID": 330,
                               "help": "State the reasons behind the disposition decision."})
    reconsiderInFY = Column(Integer, ForeignKey("fiscalyears.fiscalyearID"),
                            info={"choices": FY_CHOICES, 
                                  "label": "reconsider",
                                  "attributeID": 340,
                                  "help": "For a deferred project, when will it be considered again?"},
                            nullable=True, server_default=None)
    reconsiderInQ = Column(Integer, ForeignKey("quarters.quarterID"),
                           info={"choices": Q_CHOICES,
                                 "attributeID": 345,
                                 "help": ""},
                           nullable=True, server_default=text("'0'"))
    
    @hybrid_property
    def reconsiderIn(self):
        response = "FY" + str(self.reconsiderInFY)[-2:] if self.reconsiderInFY else ""
        response += " Q" + str(self.reconsiderInQ) if self.reconsiderInQ else ""
        return response

    startInY = Column(Integer, ForeignKey("calendaryears.calendaryearID"),
                      info={"choices": Y_CHOICES, 
                            "label": "start",
                            "attributeID": 350,
                            "help": "This date, and the next, are the dates agreed to by the project's host division during the sequencing stage.  They are high-level, estimated dates for the start and finish of work on the project."},
                      nullable=True, server_default=text("'0'"))
    startInM = Column(Integer, ForeignKey("months.monthID"),
                      info={"choices": M_CHOICES,
                            "attributeID": 355,
                            "help": ""},
                      nullable=True, server_default=text("'0'"))
    startMChoice = db.relationship("Month", 
                                   primaryjoin=startInM==Month.monthID,
                                   backref="latest_disposition_start")
    
    @hybrid_property
    def startIn(self):
        response = self.startMChoice.monthDesc if self.startMChoice.monthDesc else ""
        response += " {}".format(str(self.startInY)) if self.startInY else ""
        return response
        
    finishInY = Column(Integer, ForeignKey("calendaryears.calendaryearID"),
                       info={"choices": Y_CHOICES, 
                             "label": "finish",
                             "attributeID": 360,
                             "help": "What finishing month was estimated in the scheduling phase?"},
                       nullable=True, server_default=text("'0'"))
    finishInM = Column(Integer, ForeignKey("months.monthID"),
                       info={"choices": M_CHOICES,
                             "attributeID": 365,
                             "help": ""},
                       nullable=True, server_default=text("'0'"))
    finishMChoice = db.relationship("Month", 
                                    primaryjoin=finishInM==Month.monthID,
                                    backref="latest_disposition_finish")
    
    @hybrid_property
    def finishIn(self):
        response = self.finishMChoice[0].finishInMDesc if self.finishMChoice[0].finishInMDesc else ""
        response += " {}".format(str(self.finishInY)) if self.finishInY else ""
        return response
        
    lastModified = Column(DateTime, nullable=True, server_default=text("CURRENT_TIMESTAMP"), 
                          info={"label": "last updated", "attributeID": 998, "help": ""})
    lastModifiedBy = Column(String(100), nullable=True, server_default=text("''"), 
                            info={"label": "last updated by", "attributeID": 999, "help": ""})

    description = db.relationship("Description", backref="disposition")
    
class Description(Base):
    __tablename__ = "description"
        
    projectID = Column(Integer, primary_key=True, nullable=False, autoincrement=True)
    name = Column(String(100), nullable=False, index=True, server_default=text("''"),
                  info={"attributeID": 20,
                        "help": "A concise (<50 characters), descriptive, and unique identifying name for the proposed work (not containing the word 'project')."})
    description = Column(Text, nullable=True, 
                         info={"attributeID": 30,
                               "help": "A clear description of the objective/purpose of the proposed project, and if known, what it would take to complete. The first 100 characters will be used in listings, etc."})
    rationale = Column(Text, nullable=True, 
                       info={"attributeID": 40,
                             "help": "Why is the proposed work important? Tie it to STScI, mission and division strategies, where possible. Does it save costs, avoid risks, etc? If so, also indicate this in the relevant metadata."})
    businesscase = Column(Text, 
                          info={"label": "business case",
                                "attributeID": 50,
                                "help": "A business case compares the costs (labor, non-labor, opportunity) of doing the work with the potential benefits, and the risk of not doing, the work to show a return on investments. For projects that require significant investments, the funding source(s) and type(s) must also be identified."},
                          nullable=True)
    dependencies = Column(Text, nullable=True,
                          info={"attributeID": 60,
                                "help": "Describe any dependencies between this and other projects: must preceed, depends on, must be coordinated with, competes for unique resources with, ..."})
    maturityID = Column(Integer, ForeignKey(Maturitylist.maturityID), 
                        info={"choices": MATURITY_CHOICES, 
                              "label": "maturity",
                              "attributeID": 70,
                              "help": "Maturity shows where an idea is on the path to full-fledged, planning-ready project."},
                        nullable=True, index=True, server_default=text("'0'"))
    maturity = db.relationship("Maturitylist", backref="description")
    proposer = Column(String(100), nullable=True, server_default=text("''"),
                      info={"attributeID": 80,
                            "help": "Name of the organization and/or person that proposed the original idea."})
    customer = Column(String(100), nullable=True, server_default=text("''"),
                      info={"attributeID": 90,
                            "help": "Name of the person who says when the project is done."})
    sponsorID = Column(Integer, ForeignKey(Sponsorlist.sponsorID), 
                       info={"choices": SPONSOR_CHOICES, 
                             "label": "sponsor",
                             "attributeID": 100,
                             "help": "Name of the sponsoring organization for the project, which is the one that pays for doing the work.  Together with Funding Source, this uniquely identifies how we will pay for doing the work or making the required capital investments."},
                       nullable=True, index=True, server_default=text("'0'"))
    sponsor = db.relationship("Sponsorlist", backref="description")
    fundingsourceID = Column(Integer, ForeignKey(Fundingsourcelist.fundingsourceID), 
                             info={"choices": FUNDINGSOURCE_CHOICES, 
                                   "label": "funding source",
                                   "attributeID": 110,
                                   "help": "Identify the funding source for this project. Here, 'Other' will be used for grants and other contracts besides HST and JWST. Together with Sponsor this uniquely identifies how we will pay for doing the work or making the required capital investments."},
                             nullable=True, server_default=text("'0'"))
    fundingsource = db.relationship("Fundingsourcelist", backref="description")
    hostID = Column(Integer, ForeignKey(Hostlist.hostID), 
                    info={"choices": HOST_CHOICES, 
                          "label": "host",
                          "attributeID": 120,
                          "help": "Name of the host organization for the project, which is the one that manages doing the work."}, 
                    nullable=True, index=True, server_default=text("'0'"))
    host = db.relationship("Hostlist", backref="description")
    stakeholderID = db.relationship("Stakeholderlist", 
                                    secondary=t_stakeholder,
                                    info={"attributeID": 130,
                                          "help": "Which organizations, besides the sponsor stand to be affected (positively or negatively) by this project?"})
    technologyID = Column(Integer, ForeignKey(Technologylist.technologyID), 
                          info={"choices": TECHNOLOGY_CHOICES, 
                                "coerce": int,
                                "label": "technology",
                                "attributeID": 140,
                                "help": "Identify the primary technology involved with/affected by this project.  Use the categorization of the Technology Report. Note: The Implementation Plan is sorted by technology, and projects with no technology will not show up!"}, 
                          nullable=True, server_default=None)
    technology = db.relationship("Technologylist", backref="description")
    typeID = Column(Integer, ForeignKey(Typelist.typeID), 
                    info={"choices": TYPE_CHOICES, 
                          "label": "type",
                          "attributeID": 150,
                          "help": "Categorize the project type."}, 
                    nullable=True, server_default=text("'0'"))
    type = db.relationship("Typelist", backref="description")
    driverID = db.relationship("Driverlist", 
                               secondary=t_driver,
                               info={"attributeID": 160,
                                     "help": "Identify the primary drivers, or rationale, for this project."})
    created = Column(Date, nullable=True,
                    info={"attributeID": 170,
                          "help": "The date on which the original idea was entered into the tool. This is a computed value."})
    ended = Column(Date, nullable=True,
                   info={"attributeID": 180,
                         "help": "The date on which the project was marked as ended. This is a computed value."})
    finalID = Column(Integer, ForeignKey(Finallist.finalID), 
                     info={"choices": FINAL_CHOICES, 
                           "label": "final state",
                           "attributeID": 190,
                           "help": "If this project has come to an end, one way or the other, what is that final state?"}, 
                     nullable=True, index=True, server_default=text("'0'"))
    finalChoice = db.relationship("Finallist", backref="description")
    childID = db.relationship("Description", 
                               secondary=t_child,
                               primaryjoin=projectID==t_child.c.projectID,
                               secondaryjoin=projectID==t_child.c.childID,
                               order_by=projectID,
                               backref="desc",
                               info={"label": "children",
                                     "attributeID": 200,
                                     "help": "For an absorbed project, enter the project ID of the surviving project. For a split project, enter the project IDs of the child projects."})
    lastModified = Column(DateTime, nullable=True, server_default=text("CURRENT_TIMESTAMP"), info={"label": "last updated", "attributeID": 998, "help": ""})
    lastModifiedBy = Column(String(100), nullable=True, server_default=text("''"), info={"label": "last updated by", "attributeID": 999, "help": ""})
    
        
class Comment(Base):
    __tablename__ = "comment"

    commentID = Column(Integer, primary_key=True, nullable=True, autoincrement=True,
                       info={"attributeID": 335,
                             "help": ""})
    projectID = Column(Integer, ForeignKey("description.projectID"), nullable=False, index=True, server_default=text("'0'"),
                       info={"help": ""})
    comment = Column(Text, nullable=False,
                     info={"attributeID": 440,
                           "help": "Comment text goes here."})
    commentAuthor = Column(String(100), 
                           info={"label": "created by",
                                 "attributeID": 450,
                                 "help": "User ID of original author. This is a computed value."},
                           nullable=True, index=True, server_default=text("''"))
    commentAuthored = Column(DateTime, 
                             info={"label": "on",
                                   "attributeID": 460,
                                   "help": "Date that comment was written. This is a computed value."},
                             nullable=True, index=True)
    commentEditor = Column(String(100),
                           info={"label": "last edited by",
                                 "attributeID": 470, 
                                 "help": "Most recent editor. This is a computed attribute."},
                           nullable=True, index=True, server_default=text("''"))
    commentEdited = Column(DateTime, info={"label": "on",
                                           "attributeID": 480,
                                           "help": "Time of last edit. This is a computed value."},
                           nullable=True, index=True)

    description = db.relationship("Description", backref="comments")

class History(Base):
    __tablename__ = "history"

    historyID = Column(Integer, primary_key=True)
    projectID = Column(Integer, ForeignKey("description.projectID"), nullable=False, index=True, server_default=text("'0'"))
    attributeName = Column(String(100), nullable=False, server_default=text("''"))
    oldValue = Column(Integer, nullable=False, server_default=text("'0'"))
    newValue = Column(Integer, nullable=False, server_default=text("'0'"))
    lastModified = Column(DateTime, nullable=True, server_default=text("CURRENT_TIMESTAMP"), 
                          info={"label": "last updated", "attributeID": 998, "help": ""})
    lastModifiedBy = Column(String(100), nullable=True, server_default=text("''"), 
                            info={"label": "last updated by", "attributeID": 999, "help": ""})


t_strategy = Table(
    "strategy", metadata,
    Column("projectID", Integer, ForeignKey("portfolio.projectID"),
           nullable=False, index=True, server_default=text("'0'")),
    Column("strategyID", Integer, ForeignKey("strategylist.strategyID"),
           info={"label": "strategies"},
           nullable=False, index=True, server_default=text("'0'"))
)

class Portfolio(Base):
    __tablename__ = "portfolio"

    projectID = Column(Integer, ForeignKey("description.projectID"), primary_key=True)
    flavorID = Column(Integer, ForeignKey("flavorlist.flavorID"),
                      info={"choices": FLAVOR_CHOICES, 
                            "label": "portfolio category",
                            "attributeID": 210,
                            "help": "Project portfolio management is not all about strategy and resources.  Maintaining a balance between the projects that have to be done to keep us going, that allow us to get better at what we do, and that allow us to really change what we do has its own strategic value.  This attribute categorizes this project in that dimension."},
                      nullable=True, index=True, server_default=text("'0'"))
    flavor = db.relationship("Flavorlist", backref="portfolio")
    strategyID = db.relationship("Strategylist", 
                                 secondary=t_strategy,
                                 info={"attributeID": 220,
                                       "help": "Which Institute strategic goals does this project support, if any?"})
    initiativeID = Column(Integer, ForeignKey("initiativelist.initiativeID"),
                          info={"choices": INITIATIVE_CHOICES, 
                                "label": "initiative",
                                "attributeID": 230,
                                "help": "Which Office of Technology initiative does this project belong in, if any?"},
                          nullable=True, index=True, server_default=text("'0'"))
    initiative = db.relationship("Initiativelist", backref="portfolio")
    scopeID = Column(Integer, ForeignKey("scopelist.scopeID"),
                     info={"choices": SCOPE_CHOICES, 
                           "label": "scope",
                           "attributeID": 240,
                           "help": "These next five attributes are criteria that, taken together, determine the level of attention that this project deserves. This may be reflected in the level of reporting to stakeholders and management, in the level of project management during project execution, etc. We don't have enough experience at the moment to say where the dividing lines are, so for now you will have to make your own best guess. Characterize the scope level of this project."},
                     nullable=True, index=True, server_default=text("'0'"))
    scope = db.relationship("Scopelist", backref="portfolio")
    complexityID = Column(Integer, ForeignKey("complexitylist.complexityID"),
                          info={"choices": COMPLEXITY_CHOICES, 
                                "label": "complexity",
                                "attributeID": 250,
                                "help": "Characterize the complexity level of this project."},
                          nullable=True, index=True, server_default=text("'0'"))
    complexity = db.relationship("Complexitylist", backref="portfolio")
    visibilityID = Column(Integer, ForeignKey("visibilitylist.visibilityID"),
                          info={"choices": VISIBILITY_CHOICES, 
                                "label": "visibility",
                                "attributeID": 260,
                                "help": "Characterize the level of visibility of this project.  Does it reach the project at GSFC, NASA HQ, the astronomical community, the public?"},
                          nullable=True, index=True, server_default=text("'0'"))
    visibility = db.relationship("Visibilitylist", backref="portfolio")
    risklevelID = Column(Integer, ForeignKey("risklevellist.risklevelID"),
                         info={"choices": RISKLEVEL_CHOICES, 
                               "label": "risk level",
                               "attributeID": 270,
                               "help": "Characterize the level of risk associated with not doing this project."},
                         nullable=True, index=True, server_default=text("'0'"))
    risklevel = db.relationship("Risklevellist", backref="portfolio")
    costlevelID = Column(Integer, ForeignKey("costlevellist.costlevelID"),
                         info={"choices": COSTLEVEL_CHOICES, 
                               "label": "cost level",
                               "attributeID": 280,
                               "help": "Characterize the cost level of this project."},
                         nullable=True, index=True, server_default=text("'0'"))
    costlevel = db.relationship("Costlevellist", backref="portfolio")
    rpu = Column(Float, nullable=True, 
                 info={"label": "effort",
                       "attributeID": 290,
                       "help": "Enter the estimated project effort in RPUs.  An  RPU (Reference Project Unit) corresponds to a level of effort of 1000 hours during the 6 month planning period, with half of those hours coming from critical resources.  A higher RPU may be assigned if the project has a high management overhead, extraordinary reporting requirements, high visibility, or any other factor likely to require above average effort in ordinary project management tasks."}, 
                 server_default=text("'0'"))
    budgetInFY = Column(Integer, ForeignKey("fiscalyears.fiscalyearID"), 
                        info={"choices": FY_CHOICES, 
                              "coerce": int,
                              "label": "budget",
                              "attributeID": 300,
                              "help": "For projects whose budget needs to be planned (e.g., ED-05), when will that happen?"},
                        nullable=True, index=True, server_default=None)
    budgetInQ = Column(Integer, ForeignKey("quarters.quarterID"),
                       info={"choices": Q_CHOICES, 
                             "label": "",
                             "attributeID": 305,
                             "help": ""},
                       nullable=True, index=True, server_default=text("'0'"))
    lastModified = Column(DateTime, nullable=True, server_default=text("CURRENT_TIMESTAMP"), 
                          info={"label": "last updated", "attributeID": 998, "help": ""})
    lastModifiedBy = Column(String(100), nullable=True, server_default=text("''"), 
                            info={"label": "last updated by", "attributeID": 999, "help": ""})

    description = db.relationship("Description", backref="portfolio")

class Project(Base):
    __tablename__ = "project"

    projectID = Column(Integer, ForeignKey("description.projectID"), primary_key=True, server_default=text("'0'"))
    project_url = Column(String(255), 
                         info={"label": "project url",
                               "attributeID": 370,
                               "help": "The full URL of the project page. The project page is where project status is reported, such as on the CPT project wiki. Limited to 255 characters."},
                         nullable=True, server_default=text("''"))
    progressID = Column(Integer, ForeignKey("progresslist.progressID"),
                        info={"choices": PROGRESS_CHOICES, 
                              "label": "progress",
                              "attributeID": 380,
                              "help": "Where is this project in the Project Management Framework?"},
                        nullable=True, index=True, server_default=text("'0'"))
    progress = db.relationship("Progresslist", backref="project")
    proj_manager = Column(String(100), 
                          info={"label": "project manager",
                                "attributeID": 390,
                                "help": "Name of the project manager."},
                          nullable=True, index=True, server_default=text("''"))
    tech_manager = Column(String(100), 
                          info={"label": "technical manager",
                                "attributeID": 400,
                                "help": "Name of the technical manager."}, 
                          nullable=True, index=True, server_default=text("''"))
    proj_visibilityID = Column(Integer, ForeignKey("proj_visibilitylist.proj_visibilityID"),
                               info={"choices": PROJ_VISIBILITY_CHOICES, 
                                     "label": "project visibility",
                                     "attributeID": 410,
                                     "help": "Categorize visibility for running this project. Will it be run as an integrated schedule project, a regular project, or as some other (lower visibility) type?"},
                               nullable=True, index=True, server_default=text("'0'"))
    proj_visibility = db.relationship("Proj_visibilitylist", backref="project")
    startedOn = Column(Date, 
                       info={"label": "started on",
                             "attributeID": 420,
                             "help": "The actual date on which the project started running, i.e., the first day of the definition phase."},
                       nullable=True, index=True)
    finishedOn = Column(Date, 
                        info={"label": "finished on",
                              "attributeID": 430,
                              "help": "The date on which the project was successfully ended, i.e., the last day of the closeout phase of the project.  Format as above."},
                        nullable=True, index=True)
    lastModified = Column(DateTime, nullable=True, 
                          info={"label": "last updated", "attributeID": 998, "help": ""})
    lastModifiedBy = Column(String(100), nullable=True, server_default=text("''"), 
                            info={"label": "last updated by", "attributeID": 999, "help": ""})
    
    description = db.relationship("Description", backref="project")

