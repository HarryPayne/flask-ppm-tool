/*! flask-ppm-tool 02-07-2015 */
!function(){angular.module("PPT",["app.attributes","app.browse","app.comment","app.curate","app.filter","app.header","app.login","app.loginInjectorProvider","app.manage","app.modalConfirm","app.project","app.select","app.stateLocation","app.title"])}(),function(){"use strict";function PPTConfig($urlRouterProvider){$urlRouterProvider.otherwise("/select")}angular.module("PPT").config(PPTConfig),PPTConfig.$inject=["$urlRouterProvider"]}(),function(){"use strict";function PPTCtrl($rootScope,$location){}angular.module("PPT").controller("PPTCtrl",PPTCtrl),PPTCtrl.$inject=["$rootScope","$location"]}(),function(){"use strict";function initializeApp($rootScope,projectListService,projectDataService,stateLocationService){function _initializeApp(e,toState,toParams,fromState,fromParams){if(window.onbeforeunload=function(event){$rootScope.$broadcast("savestate")},("select"==toState.name.substring(0,"select".length)||"filter"==toState.name)&&(projectListService.updateAllProjects(),projectListService.setList(projectListService.getIDListFromAllProjects()),projectListService.setDescription("none;")),"project"==toState.name.substring(0,"project".length)&&!projectListService.hasProjects()){projectListService.updateAllProjects();var projectID,masterList=projectListService.getMasterList(),selectedIds=masterList.selectedIds;masterList.projectID;toParams.projectID?(projectID=parseInt(toParams.projectID),selectedIds=[projectID],projectListService.setList(selectedIds),projectListService.setDescription("projectID = "+projectID+";")):(projectID=stateLocationService.getStateFromLocation().stateParams.projectID,projectID||projectListService.hasProjects()&&(projectID=masterList.index>-1?selectedIds[masterList.index]:selectedIds[0])),projectListService.updateProjectListProjectID(projectID,selectedIds),projectDataService.projectID&&projectDataService.projectID==projectID||(projectDataService.projectID=projectID,projectDataService.getProjectData(projectID))}}$rootScope.$on("$stateChangeStart",_initializeApp)}angular.module("PPT").run(initializeApp),initializeApp.$inject=["$rootScope","projectListService","projectDataService","stateLocationService"]}(),function(){angular.module("app.attributes",["ui.router"])}(),function(){"use strict";function Attributes($scope,$state,attributesService){this.als=attributesService,this.attributes=this.als.getAttributes}angular.module("app.attributes").controller("Attributes",Attributes),Attributes.$inject=["$scope","$state","attributesService"]}(),function(){"use strict";function attributesService($rootScope,$http,projectListService){function addAttrToDataObj(attr){if("multipleSelect"==attr.format||"dateRangeSelect"==attr.format)_.isArray(attr.value)?this[attr.name]=_.map(attr.value,function(a){return a.id}):this[attr.name]=attr.value.id,attr.child&&(_.isArray(attr.child.value)?this[attr.child.name]=attr.child.value:this[attr.child.name]=attr.child.value.id);else if("date"==attr.format||_.contains(["commentAuthored","commentEdited"],attr.name)){if(attr.computed)return;attr.value?this[attr.name]=new Date(attr.value).toString("yyyy-MM-ddTHH:mm:ss"):this[attr.name]=null}else"child_for_"!=attr.format.substring(0,"child_for_".length)&&(this[attr.name]=attr.value)}function addUniqueAttrToDataObj(attr){_.contains(["disposition","comment"],attr.table)||addAttrToDataObj(attr)}function clearAllErrors(){_.each(service.allAttributes,function(attr){delete attr.errors})}function getAttribute(name){return service.allAttributes[name]}function getAllAttributes(){return service.allAttributes}function getFormData(tableName,keys){var formData=new Object;return formData.csrf_token=service.csrf_token,"undefined"!=typeof keys&&_.each(keys,function(key){"undefined"!=typeof key.value.id?formData[key.name]=key.value.id:formData[key.name]=key.value}),_.each(service.getProjectAttributes(tableName),addAttrToDataObj,formData),"comment"==tableName&&(formData.commentEditor=$rootScope.currentUser.id),formData}function getProjectAttributes(tableName,flag){try{return _.sortBy(service.projectAttributes[tableName],"attributeID")}catch(e){}}function getRawAttributes(tableName){try{return service.rawAttributes[tableName]}catch(e){}}function getSelectedChoices(merged){return merged.multi?_.filter(merged.choices,function(choice){return _.contains(merged.value,choice.id)}):"lines"==merged.format?_.filter(merged.choices,function(choice){return _.contains(merged.value,choice)}):_.where(merged.choices,{id:merged.value})[0]}function hasAValue(attr){return"undefined"!=typeof attr.value&&null!=attr.value&&""!=attr.value&&attr.value!=[]||"undefined"!=typeof attr.value&&null!=attr.value&&"undefined"!=typeof attr.value.id&&null!=attr.value.id&&""!=attr.value&&attr.value!=[]?!0:!1}function getToken(){return service.csrf_token}function makeProjectLink(projectID){return"project linke here"}function mergeAttributeWithValue(attr){var merged=service.allAttributes[attr.name];merged.value=attr.value,attr.printValue&&(merged.printValue=attr.printValue),"child_for_"!=merged.format.substring(0,"child_for_".length)&&("date"==merged.format&&attr.value&&(merged.value=new Date(Date.parse(attr.value))),service.projectAttributes[this].push(merged))}function newProjectAttributes(){_.each(["description","portfolio","project"],function(tableName){service.projectAttributes[tableName]=[],updateProjAttrsFromRawItem(tableName,[])})}function RestoreState(){var data=angular.fromJson(sessionStorage.attributesService);data&&(service.allAttributes=data.allAttributes,service.projectID=data.projectID)}function SaveState(){var data=new Object;data.allAttributes=service.allAttributes,data.projectID=service.projectID,sessionStorage.attributesService=angular.toJson(data)}function setAllAttributes(response){service.allAttributes=response.data;var parents=_.filter(response.data,function(attr){return attr.child?!0:void 0});_.each(parents,function(parent){var child=parent.child;service.allAttributes[child.name]=child})}function updateProjAttrsFromRawItem(tableName,keys){var raw_items=getRawAttributes(tableName),filtered_items=raw_items;"undefined"==typeof filtered_items&&(filtered_items=[]);var selected;if(_.each(keys,function(key){filtered_items=_.filter(filtered_items,function(item){return"undefined"==typeof item[key.name].id&&item[key.name]==key.id?!0:item[key.name].id==key.id?!0:void 0})}),filtered_items.length)return selected=filtered_items[0],service.projectAttributes[tableName]=[],_.each(Object.keys(selected),function(key){try{service.allAttributes[key].value=selected[key],service.projectAttributes[tableName].push(service.allAttributes[key])}catch(e){}}),selected;var tableAttrs=_.where(service.allAttributes,{table:tableName});service.projectAttributes[tableName]=[],_.each(tableAttrs,function(attr){attr.computed||(_.contains(["multipleSelect","dateRangeSelect"],attr.format)?attr.value=[]:attr.value="",service.projectAttributes[tableName].push(attr))})}function updateAllAttributes(){$http.get("/getAllAttributes").then(service.setAllAttributes)}function updateErrors(errors){"undefined"!=typeof errors&&_.each(errors,function(error){_.each(Object.keys(error),function(key){var attr=service.getAttribute(key);attr.server_errors=this[key]},error)})}function updateProjectAttributes(result,params){service.projectID=result.data.projectID,service.csrf_token=result.data.csrf_token,service.errors=result.data.errors,service.clearAllErrors(),delete service.success,service.updateErrors(result.data.errors),"OK"==result.statusText&&_.each(result.data.formData,updateProjectAttributesFromForm)}function updateProjectAttributesFromForm(form){var tableData=new Object;tableData.tableName=form.tableName,_.isArray(form.attributes[0].attributes)?("undefined"==typeof service.rawAttributes&&(service.rawAttributes=new Object),service.rawAttributes[tableData.tableName]=[],_.each(form.attributes,function(subform){var formObj=new Object;_.each(subform.attributes,function(attr){formObj[attr.name]=attr.value,"undefined"!=typeof attr.printValue&&(formObj[attr.name+".printValue"]=attr.printValue)}),service.rawAttributes[tableData.tableName].push(formObj)})):("undefined"==typeof service.projectAttributes&&(service.projectAttributes=new Object),service.projectAttributes[tableData.tableName]=[],_.each(form.attributes,mergeAttributeWithValue,tableData.tableName))}var service={addAttrToDataObj:addAttrToDataObj,addUniqueAttrToDataObj:addUniqueAttrToDataObj,clearAllErrors:clearAllErrors,getAttribute:getAttribute,getAllAttributes:getAllAttributes,getFormData:getFormData,getProjectAttributes:getProjectAttributes,getRawAttributes:getRawAttributes,getSelectedChoices:getSelectedChoices,getToken:getToken,hasAValue:hasAValue,makeProjectLink:makeProjectLink,mergeAttributeWithValue:mergeAttributeWithValue,newProjectAttributes:newProjectAttributes,RestoreState:RestoreState,SaveState:SaveState,setAllAttributes:setAllAttributes,updateProjAttrsFromRawItem:updateProjAttrsFromRawItem,updateAllAttributes:updateAllAttributes,updateErrors:updateErrors,updateProjectAttributes:updateProjectAttributes,updateProjectAttributesFromForm:updateProjectAttributesFromForm};return service.RestoreState(),"undefined"==typeof service.attributes&&service.updateAllAttributes(),$rootScope.$on("savestate",service.SaveState),$rootScope.$on("restorestate",service.RestoreState),service}angular.module("app.attributes").factory("attributesService",attributesService),attributesService.$inject=["$rootScope","$http","projectListService"]}(),function(){angular.module("app.browse",["ui.router"])}(),function(){"use strict";function browseConfig($stateProvider){$stateProvider.state("browse",{name:"browse",url:"/browse",templateUrl:"/static/browse/browse.html",controller:"Browse",controllerAs:"browse",data:{requiresLogin:!1}})}angular.module("app.browse").config(browseConfig),browseConfig.$inject=["$stateProvider"]}(),function(){"use strict";function Browse($scope,projectListService){this.ls=projectListService,this.masterList=this.ls.getMasterList}angular.module("app.browse").controller("Browse",Browse),Browse.$inject=["$scope","projectListService"]}(),function(){angular.module("app.comment",["ui.router"])}(),function(){"use strict";function commentConfig($stateProvider){$stateProvider.state("comment",{name:"comment",url:"/comment",templateUrl:"/static/comment/comment.html",controller:"Comment",controllerAs:"comment",data:{requiresLogin:!0}})}angular.module("app.comment").config(commentConfig),commentConfig.$inject=["$stateProvider"]}(),function(){"use strict";function Comment($scope,$rootScope){this.currentUser=$rootScope.currentUser}angular.module("app.comment").controller("Comment",Comment),Comment.$inject=["$scope","$rootScope"]}(),function(){angular.module("app.curate",["ui.router"])}(),function(){"use strict";function curateConfig($stateProvider){$stateProvider.state("curate",{name:"curate",url:"/curate",templateUrl:"/static/curate/curate.html",controller:"Curate",controllerAs:"curate",data:{requiresLogin:!0}})}angular.module("app.curate").config(curateConfig),curateConfig.$inject=["$stateProvider"]}(),function(){"use strict";function Curate($scope,$rootScope){this.currentUser=$rootScope.currentUser}angular.module("app.curate").controller("Curate",Curate),Curate.$inject=["$scope","$rootScope"]}(),function(){angular.module("app.filter",["ui.router","angular-storage","angular-jwt"])}(),function(){"use strict";function filterConfig($stateProvider){$stateProvider.state("filter",{name:"filter",url:"/filter",controller:"Filter",controllerAs:"filter",templateUrl:"/static/filter/filter.html",data:{requiresLogin:!1}})}angular.module("app.filter").config(filterConfig),filterConfig.$inject=["$stateProvider"]}(),function(){"use strict";function Filter($scope,$http,store,jwtHelper,projectListService,selectStateService){this.ls=projectListService,this.masterList=projectListService.getMasterList,this.selectState=selectStateService}angular.module("app.filter").controller("Filter",Filter),Filter.$inject=["$scope","$http","store","jwtHelper","projectListService","selectStateService"]}(),function(){angular.module("app.header",["ui.router"])}(),function(){"use strict";function Header($rootScope,$state,projectListService,loginStateService){function jumpToNextProject(){vm.masterList().next>-1&&projectListService.jumpToProject(vm.masterList().next)}function jumpToPreviousProject(){vm.masterList().previous>-1&&projectListService.jumpToProject(vm.masterList().previous)}var vm=this;this.currentUser=$rootScope.currentUser,this.masterList=projectListService.getMasterList,this.loggedIn=loginStateService.loggedIn,this.login=loginStateService.login,this.logout=loginStateService.logout,this.jumpToNextProject=jumpToNextProject,this.jumpToPreviousProject=jumpToPreviousProject,$rootScope.$on("$stateChangeSuccess",function(e,toState){function isActive(name){return toState.name.split(".")[0]===name}function hasNext(){return vm.isActive("project")&&vm.masterList().next>-1}function hasPrevious(){return vm.isActive("project")&&vm.masterList().previous>-1}vm.isActive=isActive,vm.hasNext=hasNext,vm.hasPrevious=hasPrevious})}angular.module("app.header").controller("Header",Header),Header.$inject=["$rootScope","$state","projectListService","loginStateService"]}(),function(){angular.module("app.login",["ui.bootstrap","angular-storage","angular-jwt"])}(),function(){"use strict";function loginApiService($http){function login(username,password){return $http({url:"/auth",method:"POST",data:{username:username,password:password}})}var service={login:login};return service}angular.module("app.login").factory("loginApiService",loginApiService),loginApiService.$inject=["$http"]}(),function(){"use strict";function loginConfig(jwtInterceptorProvider,$httpProvider){jwtInterceptorProvider.tokenGetter=function(store){return store.get("jwt")},$httpProvider.interceptors.push("jwtInterceptor"),$httpProvider.interceptors.push("loginInjector")}angular.module("app.login").config(loginConfig),loginConfig.$inject=["jwtInterceptorProvider","$httpProvider"]}(),function(){"use strict";function Login($scope,loginApiService){function submitLogin(email,password){loginApiService.login(email,password).then(function(user){$scope.$close(user)})}this.cancel=$scope.$dismiss,this.submit=submitLogin}angular.module("app.login").controller("Login",Login),Login.$inject=["$scope","loginApiService"]}(),function(){"use strict";function loginRun($rootScope,$state,store,jwtHelper,loginService){function loginIfRequiredByToState(e,toState,toParams,fromState,fromParams){var requiresLogin=toState.data&&toState.data.requiresLogin,noActiveToken=!store.get("jwt")||jwtHelper.isTokenExpired(store.get("jwt"));requiresLogin&&noActiveToken&&(e.preventDefault(),loginService().then(function(){return $state.go(toState.name)},function(){return""==fromState.name?$state.go("select"):void 0}))}$state.transitionTo("select"),store.get("jwt")&&!jwtHelper.isTokenExpired(store.get("jwt"))&&($rootScope.currentUser=jwtHelper.decodeToken(store.get("jwt"))),$rootScope.$on("$stateChangeStart",loginIfRequiredByToState)}angular.module("app.login").run(loginRun),loginRun.$inject=["$rootScope","$state","store","jwtHelper","loginService"]}(),function(){"use strict";function loginService($modal,$rootScope,store,jwtHelper){function getUserViaModal(){var instance=$modal.open({templateUrl:"static/login/login.html",controller:"Login",controllerAs:"login"});return instance.result.then(assignCurrentUser)}function assignCurrentUser(response){if(200==response.status){store.set("jwt",response.data.token);var user=jwtHelper.decodeToken(response.data.token);return $rootScope.currentUser=user,user}return response}return getUserViaModal}angular.module("app.login").service("loginService",loginService),loginService.$inject=["$modal","$rootScope","store","jwtHelper"]}(),function(){"use strict";function loginStateService($rootScope,$http,store,jwtHelper,loginService){function loggedIn(){return Boolean(store.get("jwt"))}function login(){loginService()}function logout(){store.remove("jwt"),delete $rootScope.currentUser}function SaveState(){sessionStorage.loginStateService=angular.toJson(service.masterList)}function RestoreState(){service.masterList=angular.fromJson(sessionStorage.loginStateService)}var service={loggedIn:loggedIn,login:login,logout:logout,SaveState:SaveState,RestoreState:RestoreState};return service}angular.module("app.login").factory("loginStateService",loginStateService),loginStateService.$inject=["$rootScope","$http","store","jwtHelper","loginService"]}(),function(){angular.module("app.loginInjectorProvider",[])}(),function(){"use strict";function LoginInjector($q,$injector,$timeout){function responseError(rejection){if(401!==rejection.status)return rejection;var deferred=$q.defer();return loginService().then(function(){deferred.resolve($http(rejection.config))},function(){$state.go("select"),deferred.reject(rejection)}),deferred.promise}var loginService,$http,$state,service={responseError:responseError};return service}angular.module("app.loginInjectorProvider").factory("loginInjector",LoginInjector),LoginInjector.$inject=["$q","$injector","$timeout"]}(),function(){angular.module("app.manage",["ui.router"])}(),function(){"use strict";function manageConfig($stateProvider){$stateProvider.state("manage",{name:"manage",url:"/manage",templateUrl:"/static/manage/manage.html",controller:"Manage",controllerAs:"manage",data:{requiresLogin:!0}})}angular.module("app.manage").config(manageConfig),manageConfig.$inject=["$stateProvider"]}(),function(){"use strict";function Manage($rootScope){this.currentUser=$rootScope.currentUser}angular.module("app.manage").controller("Manage",Manage),Manage.$inject=["$rootScope"]}(),function(){angular.module("app.modalConfirm",["ui.bootstrap"])}(),function(){"use strict";function ModalConfirmService($modal){function show(customDefaults,customOptions){var currentDefaults={},currentOptions={};return jQuery.extend(currentDefaults,service.modalDefaults,customDefaults),jQuery.extend(currentOptions,service.modalOptions,customOptions),currentDefaults.controller||(currentDefaults.controller=function($scope,$modalInstance){$scope.modalOptions=currentOptions,$scope.modalOptions.ok=function(result){$modalInstance.close(result)},$scope.modalOptions.close=function(result){$modalInstance.dismiss("cancel")}}),$modal.open(currentDefaults).result}function showModal(customDefaults,customOptions){return customDefaults||(customDefaults={}),customDefaults.backdrop="static",service.show(customDefaults,customOptions)}var service={modalDefaults:{backdrop:!0,keyboard:!0,modalFade:!0,templateUrl:"/static/modalConfirm/confirm.html"},modalOptions:{actionText:"OK",bodyText:"OK to proceed?",closeText:"Close",headerText:"Confirm"},show:show,showModal:showModal};return service}angular.module("app.modalConfirm").factory("modalConfirmService",ModalConfirmService),ModalConfirmService.$inject=["$modal"]}(),function(){angular.module("app.project",["ui.date","ui.router"])}(),function(){"use strict";function projectConfig($stateProvider){$stateProvider.state("project",{name:"project",url:"/project",controller:"Project",controllerAs:"project",templateUrl:"/static/project/project.html",data:{requiresLogin:!1,viewUrl:"/static/project/project.html"}}).state("project.add",{name:"project",url:"/add",data:{requiresLogin:!0}}).state("project.add.comment",{name:"project",url:"/comment/:projectID",controller:["$stateParams",function($stateParams){console.log($stateParams)}],controllerAs:"project",data:{requiresLogin:!0}}).state("project.add.disposition",{name:"project",url:"/disposition/:projectID",controller:["$stateParams",function($stateParams){console.log($stateParams)}],controllerAs:"project",data:{requiresLogin:!0}}).state("project.detail",{name:"project",url:"/:projectID",controller:["$stateParams",function($stateParams){console.log($stateParams)}],controllerAs:"project",data:{requiresLogin:!1}}).state("project.edit",{name:"project",url:"/edit",data:{requiresLogin:!0}}).state("project.edit.attach",{url:"/attach/:projectID",controller:["$stateParams",function($stateParams){console.log($stateParams)}],controllerAs:"project",data:{requiresLogin:!0}}).state("project.edit.comment",{url:"/comment/:projectID",controller:["$stateParams",function($stateParams){console.log($stateParams)}],controllerAs:"project",data:{requiresLogin:!0}}).state("project.edit.commentDetail",{url:"/commentDetail/:projectID/:commentID",controller:["$stateParams",function($stateParams){console.log($stateParams)}],controllerAs:"project",data:{requiresLogin:!0}}).state("project.edit.description",{name:"project",url:"/description/:projectID",controller:["$stateParams",function($stateParams){console.log($stateParams)}],controllerAs:"project",data:{requiresLogin:!0}}).state("project.edit.disposition",{url:"/disposition/:projectID",controller:["$stateParams",function($stateParams){console.log($stateParams)}],controllerAs:"project",data:{requiresLogin:!0}}).state("project.edit.dispositionDetail",{url:"/dispositionDetail/:projectID/:disposedInFY/:disposedInQ",controller:["$stateParams",function($stateParams){console.log($stateParams)}],controllerAs:"project",data:{requiresLogin:!0}}).state("project.edit.portfolio",{url:"/portfolio/:projectID",controller:["$stateParams",function($stateParams){console.log($stateParams)}],controllerAs:"project",data:{requiresLogin:!0}}).state("project.edit.project",{url:"/project/:projectID",controller:["$stateParams",function($stateParams){console.log($stateParams)}],controllerAs:"project",data:{requiresLogin:!0}})}angular.module("app.project").config(projectConfig),projectConfig.$inject=["$stateProvider"]}(),function(){"use strict";function Project($scope,$state,projectDataService,projectListService,attributesService,modalConfirmService){this.as=attributesService,this.ds=projectDataService,this.ls=projectListService,this.attributes=attributesService.getAttributes,this.changeMode=projectDataService.changeMode,this.currentMode=projectDataService.currentMode,this.dateOptions={changeYear:!0,changeMonth:!0},this.jumpToAtachFile=projectDataService.jumpToAtachFile,this.jumpToAddForm=projectDataService.jumpToAddForm,this.masterList=this.ls.getMasterList,this.viewUrl=projectDataService.viewUrl,$scope.$on(["$stateChangeStart"],function(event,toState,toParams,fromState,fromParams){if(projectDataService.success="","undefined"!=typeof projectDataService.noCheck&&($scope.projectForm.$setPristine(!0),delete projectDataService.noCheck),$scope.projectForm.$dirty){event.preventDefault();var modalOptions={closeText:"Cancel",actionText:"Continue",headerText:"Unsaved changes",bodyText:"You have unsaved changes. Press Continue to discard your changes and navigate away, or press Cancel to stay on this page."};modalConfirmService.showModal({},modalOptions).then(function(result){$scope.projectForm.$setPristine(!0);var target=toParams.projectID?toParams.projectID:fromParams.projectID;projectDataService.getProjectData(target,toParams),$state.go(toState,toParams)})}})}angular.module("app.project").controller("Project",Project),Project.$inject=["$scope","$state","projectDataService","projectListService","attributesService","modalConfirmService"]}(),function(){"use strict";function projectDataService($rootScope,$http,$state,$stateParams,$location,projectListService,attributesService,stateLocationService){function cancelAddProject(){$state.go("select")}function changeMode(mode){mode?$state.go(mode,{projectID:service.projectID}):$state.go("project.detail",{projectID:service.projectID})}function createProject(){var formData=attributesService.getFormData("description",[]);$http.get("getProjectAttributes/0").then(function(result){service.setProjectData(result),delete formData.projectID;var request={method:"POST",url:"/projectCreate",headers:{"Content-Type":"application/x-www-form-urlencoded; charset=UTF-8"},data:jQuery.param(formData,!0)};$http(request).then(service.jumpToNewProject)})}function currentMode(){return"project.detail"==$state.current.name?"view":$state.current.name.substring(8)}function getAttributes(){return service.attributes}function getProjectData(params){parseInt(params.projectID)>-1&&$http.get("getProjectAttributes/"+params.projectID).then(function(result){service.setProjectData(result,params)})}function getProjectDataFromLocation(){var state=stateLocationService.getStateFromLocation();"projectID"in state.stateParams&&state.stateParams.projectID!=service.projectID&&(service.projectID=state.stateParams.projectID,service.getProjectData(state.stateParams),"commentID"in state.stateParams)}function hideDetails(tableName,keys){attributesService.updateProjAttrsFromRawItem(tableName,keys);$state.go("project.edit."+tableName,{projectID:$state.params.projectID})}function jumpToAtachFile(){$state.go("project.attach",{projectID:service.projectID})}function jumpToAddForm(tableName,keys){attributesService.updateProjAttrsFromRawItem(tableName,keys),$state.go("project.add."+tableName,{projectID:$state.params.projectID})}function jumpToNewProject(result){service.setProjectData(result),projectListService.updateAllProjects(result.data.projectID),$state.go("project.edit.description",{projectID:result.data.projectID})}function newProject(){attributesService.newProjectAttributes(),$state.go("select.addProject")}function RestoreState(){"undefined"!=sessionStorage.projectDataServiceAttributes&&(service.projectID=angular.fromJson(sessionStorage.projectDataServiceAttributes))}function saveProject(tableName,keys){var formData=attributesService.getFormData(tableName,keys),request=($state.params.projectID?$state.params.projectID:"",{method:"POST",url:"/projectEdit/"+$state.params.projectID+"/"+tableName,headers:{"Content-Type":"application/x-www-form-urlencoded; charset=UTF-8"},data:jQuery.param(formData,!0)});$http(request).then(service.setProjectData),service.noCheck=!0,$state.go("project.edit."+tableName,{projectID:$state.params.projectID,noCheck:!0})}function SaveState(){new Object;sessionStorage.projectDataServiceAttributes=angular.toJson(service.projectID)}function setProjectData(result,params){attributesService.updateProjectAttributes(result,params),service.success=result.data.success,service.SaveState(),attributesService.SaveState()}function showDetails(tableName,keys){var selected=attributesService.updateProjAttrsFromRawItem(tableName,keys);"comment"==tableName&&$state.go("project.edit.commentDetail",{projectID:service.projectID,commentID:selected.commentID}),"disposition"==tableName&&$state.go("project.edit.dispositionDetail",{projectID:service.projectID,disposedInFY:selected.disposedInFY.id,disposedInQ:selected.disposedInQ.id})}function showEditSuccess(){return Boolean(_.contains(projectForm.classList,"ng-pristine")&&service.success)}var service={attributes:attributesService.getAttributes,cancelAddProject:cancelAddProject,changeMode:changeMode,createProject:createProject,currentMode:currentMode,getProjectData:getProjectData,getAttributes:getAttributes,getProjectAttributes:attributesService.getProjectAttributes,getProjectDataFromLocation:getProjectDataFromLocation,hideDetails:hideDetails,jumpToAtachFile:jumpToAtachFile,jumpToAddForm:jumpToAddForm,jumpToNewProject:jumpToNewProject,newProject:newProject,printValue:attributesService.printValue,projectID:$stateParams.projectID,RestoreState:RestoreState,saveProject:saveProject,SaveState:SaveState,setProjectData:setProjectData,showDetails:showDetails,showEditSuccess:showEditSuccess,stateParams:$stateParams,viewUrl:$state.current.data?$state.current.data.viewUrl:""};return service.RestoreState(),"undefined"==typeof service.attributes&&service.getProjectData(service.projectID),$rootScope.$on("savestate",service.SaveState),$rootScope.$on("restorestate",service.RestoreState),$rootScope.$on("$locationChangeSuccess",service.getProjectDataFromLocation),service.SaveState(),service}angular.module("app.project").factory("projectDataService",projectDataService),projectDataService.$inject=["$rootScope","$http","$state","$stateParams","$location","projectListService","attributesService","stateLocationService"]}(),function(){"use strict";function ProjectListService($rootScope,$http,$state,$stateParams,$location){function getAllProjectResults(results,projectID){if("undefined"==typeof projectID)var projectID=service.masterList.projectID;service.masterList.allProjects=results.data;var projectIDList=service.getIDListFromAllProjects();("undefined"==typeof projectID||0>projectID)&&(projectID=projectIDList[0]),updateProjectListProjectID(projectID,projectIDList)}function getIDListFromAllProjects(){return _.map(service.masterList.allProjects,function(item){return item.projectID})}function getMasterList(){return service.masterList}function getProjectID(){return"undefined"==typeof service.projectID?$stateParams.projectID:service.projectID}function hasProjects(){return Boolean(service.getMasterList().allProjects.length>0)}function initModel(){service.masterList={allProjects:[],description:"",index:-1,next:-1,previous:-1,projectID:-1,projectName:"",selectedIds:[]}}function jumpToProject(projectID){projectID=parseInt(projectID);service.masterList.selectedIds.indexOf(projectID);if(service.masterList.selectedIds.indexOf(projectID)>-1)return void service.jumpToProjectInList(projectID,service.masterList.selectedIds);var projectIDlist=service.getIDListFromAllProjects();return projectIDlist.indexOf(projectID)>-1?void service.jumpToProjectInList(projectID,projectIDlist):void alert("Can't find a project to display.")}function jumpToProjectInList(projectID,selectedIds){var index=selectedIds.indexOf(projectID);service.masterList.index=index,service.masterList.projectID=projectID,index>0?service.masterList.previous=selectedIds[index-1]:service.masterList.previous=-1,index<selectedIds.length?service.masterList.next=selectedIds[index+1]:service.masterList.next=-1;var projectIDList=service.getIDListFromAllProjects();index=projectIDList.indexOf(projectID),service.masterList.projectName=service.masterList.allProjects[index].name,$state.go("project.detail",{projectID:projectID})}function RestoreState(){service.masterList=angular.fromJson(sessionStorage.projectListService)}function SaveState(){sessionStorage.projectListService=angular.toJson(service.masterList)}function setDescription(description){service.masterList.description=description}function setList(selectedIds){service.masterList.selectedIds=selectedIds;var index=selectedIds.indexOf(service.masterList.projectID);if(0>index){var projectID=selectedIds[0];service.updateProjectListProjectID(projectID,selectedIds)}}function updateAllProjects(projectID){$http.post("/getBriefDescriptions").then(function(results){service.getAllProjectResults(results,projectID)})}function updateProjectListProjectID(projectID,selectedIds){if(projectID){"undefined"==typeof selectedIds&&(selectedIds=service.masterList.selectedIds),service.masterList.projectID=projectID;var index=selectedIds.indexOf(projectID);index>-1&&(service.masterList.index=index,index>0?service.masterList.previous=selectedIds[index-1]:service.masterList.previous=-1,index<selectedIds.length?service.masterList.next=selectedIds[index+1]:service.masterList.next=-1,"undefined"==typeof service.masterList.selectedIds[0]&&(service.masterList.selectedIds=selectedIds)),_.each(service.masterList.allProjects,function(proj){proj.projectID==projectID&&(service.masterList.projectName=proj.name)})}service.SaveState()}var service={getAllProjectResults:getAllProjectResults,getIDListFromAllProjects:getIDListFromAllProjects,getMasterList:getMasterList,getProjectID:getProjectID,hasProjects:hasProjects,initModel:initModel,jumpToProject:jumpToProject,jumpToProjectInList:jumpToProjectInList,RestoreState:RestoreState,SaveState:SaveState,setDescription:setDescription,setList:setList,updateAllProjects:updateAllProjects,updateProjectListProjectID:updateProjectListProjectID};return service.RestoreState(),"undefined"==typeof service.masterList&&service.initModel(),$rootScope.$on("savestate",service.SaveState),$rootScope.$on("restorestate",service.RestoreState),service;
}angular.module("app.project").factory("projectListService",ProjectListService),ProjectListService.$inject=["$rootScope","$http","$state","$stateParams","$location"]}(),function(){angular.module("app.select",["ui.router","readMore"])}(),function(){"use strict";function selectConfig($stateProvider){$stateProvider.state("select",{name:"select",url:"/select",controller:"Select",controllerAs:"select",templateUrl:"/static/select/select.html",data:{requiresLogin:!1}}).state("select.addProject",{name:"select",url:"/addProject",controller:"Select",controllerAs:"select",data:{requiresLogin:!0}})}angular.module("app.select").config(selectConfig),selectConfig.$inject=["$stateProvider"]}(),function(){"use strict";function Select($scope,$state,projectListService,selectStateService,projectDataService,modalConfirmService){this.state=$state,this.ls=projectListService,this.masterList=this.ls.getMasterList,this.jumpToProject=this.ls.jumpToProject,this.ss=selectStateService,this.selectState=this.ss.masterList,this.ds=projectDataService,$scope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){if(projectDataService.success="",$scope.addProject.$dirty){event.preventDefault();var modalOptions={closeText:"Cancel",actionText:"Continue",headerText:"Unsaved changes",bodyText:"You have unsaved changes. Press Continue to discard your changes and navigate away, or press Cancel to stay on this page."};modalConfirmService.showModal({},modalOptions).then(function(result){$scope.addProject.$setPristine(),$state.go(toState,toParams)})}})}angular.module("app.select").controller("Select",Select),Select.$inject=["$scope","$state","projectListService","selectStateService","projectDataService","modalConfirmService"]}(),function(){"use strict";function nameSearch(){return function(projects,searchText,nameLogic,finalID){if(!searchText)return projects;var st=(projects.length||0,(searchText||"").toLowerCase()),words=st.split(" "),out=(words.length,projects);if("0"==finalID&&(out=_.filter(out,function(project){return"0"==project.finalID})),"phrase"==nameLogic)out=_.filter(out,function(project){return(project.name+" "+project.description).toLowerCase().match(st)});else if("and"==nameLogic)_.map(words,function(word){out=_.filter(out,function(project){return(project.name+" "+project.description).toLowerCase().match(this)},word)});else if("or"==nameLogic){var partial,matches=[];_.map(words,function(word){partial=_.filter(out,function(project){return(project.name+" "+project.description).toLowerCase().match(this)},word),matches=_.union(partial,matches)}),out=_.intersection(out,matches)}return out}}angular.module("app.select").filter("nameSearch",nameSearch)}(),function(){"use strict";function selectStateService($rootScope){function clearSearchText(){service.masterList.searchText=""}function SaveState(){sessionStorage.selectStateService=angular.toJson(service.masterList)}function RestoreState(){service.masterList=angular.fromJson(sessionStorage.selectStateService)}var service={masterList:{searchText:"",nameLogic:"or",finalID:"0",clearSearchText:clearSearchText,SaveState:SaveState,RestoreState:RestoreState}};return $rootScope.$on("savestate, service.SaveState"),$rootScope.$on("restorestate, service.RestoreState"),service}angular.module("app.select").factory("selectStateService",selectStateService),selectStateService.$inject=["$rootScope"]}(),function(){angular.module("app.stateLocation",["ui.router"])}(),function(){"use strict";function SessionService(){function setStorage(key,value){var json=void 0===value?null:JSON.stringify(value);return sessionStorage.setItem(key,json)}function getStorage(key){return JSON.parse(sessionStorage.getItem(key))}function clear(){var results=[];for(key in sessionStorage)results.push(service.setStorage(key,null));return results}function stateHistory(value){return null==value&&(value=null),service.accessor("stateHistory",value)}function accessor(name,value){return null==value?service.getStorage(name):service.setStorage(name,value)}var service={setStorage:setStorage,getStorage:getStorage,clear:clear,stateHistory:stateHistory,accessor:accessor};return service}angular.module("app.stateLocation").factory("sessionService",SessionService)}(),function(){"use strict";function StateHistoryService(sessionService){function set(key,state){var hcheck=sessionService.stateHistory(),history=null!=hcheck?hcheck:{};return history[key]=state,sessionService.stateHistory(history)}function get(key){var history=sessionService.stateHistory();return null!=history?history[key]:void 0}var service={set:set,get:get};return service}angular.module("app.stateLocation").factory("stateHistoryService",StateHistoryService),StateHistoryService.$inject=["sessionService"]}(),function(){"use strict";function stateLocationRun($rootScope,$state,stateLocationService){$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams){stateLocationService.stateChange()}),$rootScope.$on("$locationChangeSuccess",function(){stateLocationService.locationChange()})}angular.module("app.stateLocation").run(stateLocationRun),stateLocationRun.$inject=["$rootScope","$state","stateLocationService"]}(),function(){"use strict";function stateLocationService($rootScope,$location,$state,$stateParams,stateHistoryService,projectListService){function getCurrentState(){return angular.fromJson(sessionStorage.currentState)}function locationChange(event){if(null==service.preventCall.pop("locationChange")){var location=$location.url();if("/project/"==location.substring(0,9)){var projectID;if("edit/commentDetail"==location.substring(9,27)){var details=location.substring(28).split("/");projectID=parseInt(details[0]);parseInt(_.first(_.last(details)))}else if("edit/dispositionDetail"==location.substring(9,31)){var details=location.substring(32).split("/");projectID=parseInt(details[0]);parseInt(details[1]),parseInt(_.first(_.last(details).split("#")))}else projectID=parseInt(_.first(_.last(location.split("/")).split("#")));projectID&&projectListService.updateProjectListProjectID(projectID)}var entry=stateHistoryService.get(location);null!=entry&&(service.preventCall.push("stateChange"),$state.go(entry.name,entry.params,{location:!1}))}}function getStateFromLocation(){var state=new Object;state.stateParams=new Object;var location=$location.url();if("/"==location)state.name="select";else if("/project/"==location.substring(0,9)){if("edit/commentDetail"==location.substring(9,26)){var details=location.substring(27);state.name="project.edit.commentDetail",state.stateParams.commentID=parseInt(_.first(_.last(details.split("/")).split("#"))),state.stateParams.projectID=parseInt(_first(details.split("/")))}else if("edit/dispositionDetail"==location.substring(9,31)){var details=location.substring(32).split("/");state.name="project.edit.dispositionDetail",state.stateParams.projectID=parseInt(details[0]),state.stateParams.disposedInFY=parseInt(details[1]),state.stateParams.disposedInQ=parseInt(_.first(_.last(details).split("#")))}else state.stateParams.projectID=parseInt(_.first(_.last(location.split("/")).split("#")))}return state}function stateChange(projectID){if(null==service.preventCall.pop("stateChange")&&$state.current.name){projectID=projectListService.getMasterList().projectID;var params=""==$state.params.projectID?{projectID:projectID}:$state.params,entry={name:$state.current.name,params:params},url=getUrlFromState(params);stateHistoryService.set(url,entry),service.preventCall.push("locationChange"),$location.url(url)}}function getUrlFromState(params){var projectID=params.projectID,hash="#"+service.guid().substr(0,8);return"project.detail"==$state.current.name?"/project/"+projectID+hash:"project."==$state.current.name.substring(0,8)?0==projectListService.getMasterList().allProjects.length?"/project/"+projectID+hash:"project.edit.commentDetail"==$state.current.name?"/"+$state.current.name.replace(/\./g,"/")+"/"+projectID+"/"+params.commentID+hash:"project.edit.dispositionDetail"==$state.current.name?"/"+$state.current.name.replace(/\./g,"/")+"/"+projectID+"/"+params.disposedInFY+"/"+params.disposedInQ+hash:"/"+$state.current.name.replace(/\./g,"/")+"/"+projectID+hash:"/"+$state.current.name.replace(/\./g,"/")}function saveCurrentState(){if($state.current.name){var entry={name:$state.current.name,params:$state.params};sessionStorage.currentState=angular.toJson(entry)}}function saveState(){if($state.current.name){var entry={name:$state.current.name,params:$state.params},url=$location.url();stateHistoryService.set(url,entry)}}function guid(){return""+service.s4()+service.s4()+"-"+service.s4()+"-"+service.s4()+"-"+service.s4()+"-"+service.s4()+service.s4()+service.s4()}function s4(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}var service={preventCall:[],locationChange:locationChange,getCurrentState:getCurrentState,getStateFromLocation:getStateFromLocation,saveState:saveState,stateChange:stateChange,saveCurrentState:saveCurrentState,guid:guid,s4:s4};return window.onbeforeunload=function(event){$rootScope.$broadcast("savestate")},service}angular.module("app.stateLocation").factory("stateLocationService",stateLocationService),stateLocationService.$inject=["$rootScope","$location","$state","$stateParams","stateHistoryService","projectListService"]}(),function(){angular.module("app.title",["ui.router"])}(),function(){"use strict";function Title($scope,$state,projectListService){var vm=this;this.masterList=projectListService.getMasterList,this.pageTitle="PPT: Select",$scope.$on("$stateChangeSuccess",function(e,toState){"select"==toState.name.split(".")[0]?vm.pageTitle="PPT: Select":"filter"==toState.name.split(".")[0]?vm.pageTitle="PPT: Filter Builder":"browse"==toState.name.split(".")[0]?vm.pageTitle="PPT: Browse":"project"==toState.name.split(".")[0]?vm.pageTitle=vm.masterList().projectID+". "+vm.masterList().projectName:"comment"==toState.name.split(".")[0]?vm.pageTitle="PPT: Comments":"curate"==toState.name.split(".")[0]?vm.pageTitle="PPT: Curate":"manage"==toState.name.split(".")[0]?vm.pageTitle="PPT: Manage":vm.pageTitle="PPT: Select"})}angular.module("app.title").controller("Title",Title),Title.$inject=["$scope","$state","projectListService"]}();